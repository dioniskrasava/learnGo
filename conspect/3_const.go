package base

import "fmt"

func ExampleConst() {
	// Вычисление констант производится во время компиляции.
	// Благодаря этому уменьшается количество работы, которую необходимо произвести
	// во время выполнения, упрощается поиск ошибок, связанных с константами
	// (так как некоторые из них можно обнаружить на момент компиляции).

	const pi float64 = 3.1415
	//pi = 2.7182 // ! Ошибка (cannot assign to pi (neither addressable nor a map index expression))

	fmt.Println(pi)

	//
	//
	// В одном определении можно объявить разу несколько констант

	const (
		hi float64 = 3.1415
		i  float64 = 2.7182
	)
	// или так:
	const fo, o = 3.1415, 2.7182

	fmt.Println(hi, i, fo, o)

	//
	//
	//
	//
	// Если у константы не указан тип, то он выводится неявно на основании того значения,
	// которым инициализируется константа:
	const n = 5 //  тип int

	// В то же время необходимо обязательно инициализировать константу начальным значением
	//  при ее объявлении. Например, следующие определения констант являются недопустимыми,
	//  так как они не инициализируются:
	//const d
	//const nu int

	fmt.Println(n)

	//
	//
	//
	//
	//
	// Если определяется последовательность констант, то инициализацию значением можно
	//  опустить для всех констант, кроме первой. В этом случае константа без значения
	//  получит значение предыдущей константы:

	const (
		a = 1
		b
		c
		d = 3
		f
	)
	fmt.Println(a, b, c, d, f) // 1, 1, 1, 3, 3

	//                       ---
	//                      /***\
	//                      |***|
	//                      |***|
	//                      |***|
	//                      |***|
	//                      |***|
	//                      |***|
	//                       ***
	//
	//                       /*\
	//                      |***|
	//                       \*/

	// Константы можно инициализировать только константными значениями,
	//  например, литералами типа чисел или строк, или значениями других
	//  констант. Но инициализировать константу значением переменной мы не можем:

	var mc int = 7
	// const k = m      // ! Ошибка: m - переменная
	const s = 5  // Норм: 5 - числовая константа
	const nc = s // Норм: s - константа

	fmt.Println(mc, s, nc)
}
