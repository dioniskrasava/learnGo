package base

import "fmt"

// циклы
func ExampleLoops() {
	//
	//----------------------------------------
	//
	// i - внутренняя переменная цикла
	for i := 1; i < 10; i++ {
		fmt.Println(i * i)
		/*
			1
			4
			9
			16
			25
			36
			49
			64
			81
		*/
	}

	//
	//----------------------------------------
	//

	// ДОПОЛНИТЕЛЬНЫЕ ФИГУРНЫЕ СКОБКИ - это блок кода со своей областью видимости
	// они нужны в этих образовательных примерах исключительно для того, чтобы
	// везде использовать одни и те же переменные и не плодить дополнительных переменных
	// как это делалось в предыдущих примерах (файлах)
	{
		var i = 1 // Можно вынести объявление переменной счетчика
		for ; i < 10; i++ {
			fmt.Println(i * i)
		}
	}
	//
	//----------------------------------------
	//
	{
		// Можно убрать изменение счетчика в само тело цикла и оставить только условие:
		var i = 1
		for i < 10 {
			fmt.Println(i * i)
			i++
		}
	}
	//
	//----------------------------------------
	//
	{
		//Если цикл использует только условие, то его можно сократить следующим образом:
		var i = 1
		for i < 10 {
			fmt.Println(i * i)
			i++
		}
	}

	//
	//----------------------------------------
	//
	//   В   Л   О   Ж   Е   Н   Н   Ы   Е           Ц    И    К    Л    Ы
	//
	{
		// ВЫВОД ТАБЛИЦЫ УМНОЖЕНИ
		for i := 1; i < 10; i++ {
			for j := 1; j < 10; j++ {
				fmt.Print(i*j, "\t")
			}
			fmt.Println()
		}
	}

	//
	//----------------------------------------
	//   П   Е   Р   Е   Б   О   Р      М    А   С   С   И   В   О    В

	{
		var users = [3]string{"Tom", "Alice", "Kate"}

		for index, value := range users {
			fmt.Println(index, value)
		}

		// Если не планируем использовать индекс :

		for _, value := range users {
			fmt.Println(value)
		}
	}

	//
	//----------------------------------------
	//
	{
		var users = [3]string{"Tom", "Alice", "Kate"}
		for i := 0; i < len(users); i++ {
			fmt.Println(users[i])
		}
	}

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

	//
	//----------------------------------------
	//

}
