package points

import "fmt"

func ExamplePoints() {
	// Указатели представляют собой объекты, значением которых служат
	// адреса других объектов (например, переменных).

	line("Введение")

	{
		var x int = 4  // определяем переменную
		var p *int     // определяем указатель
		p = &x         // указатель получает адрес переменной
		fmt.Println(p) // значение самого указателя - адрес переменной x // например 0xc000010110
	}

	line("Разыменование")

	{
		//*****************************************************
		//*                                                   *
		//*         Р А З Ы М Е Н О В А Н И Е      *          *
		//*                                                   *
		//*****************************************************
		var x int = 4
		var p *int = &x            // указатель получает адрес переменной
		fmt.Println("Address:", p) // значение указателя - адрес переменной x
		fmt.Println("Value:", *p)  // значение переменной x
	}

	line("Изменение значения через указатель")

	{
		//*****************************************************
		//*                                                   *
		//*        ИЗМЕНЕНИЕ ЗНАЧЕНИЯ ЧЕРЕЗ УКАЗАТЕЛЬ         *
		//*                                                   *
		//*****************************************************
		var x int = 4
		var p *int = &x
		*p = 25
		fmt.Println(x) // 25
	}

	line("Сокращенная форма")

	{
		// сокращенная форма
		f := 2.3
		pf := &f
		fmt.Println("Address:", pf)
		fmt.Println("Value:", *pf)
	}

	line("Пустой указатель")

	//*****************************************************
	//*                                                   *
	//*        П У С Т О Й    У К А З А Т Е Л Ь           *
	//*                                                   *
	//*****************************************************

	{
		//var pf *float64 // по умолчанию у пустого указателья значение nil
		//fmt.Println("Value:", *pf) // ! ошибка, указатель не указывает на какой-либо объект

		// поэтому лучше делать так:

		var pf *float64
		if pf != nil {
			fmt.Println("Value:", *pf)
		}
	}

	line("Функция new")

	//*****************************************************
	//*                                                   *
	//*                  Ф У Н К Ц И Я    N E W           *
	//*                                                   *
	//*****************************************************

	/*
			Функция new

		Переменная представляет именованный объект в памяти. Язык Go также позволяет
		создавать безымянные объекты - они также размещаются в памяти, но не имеют
		имени как переменные. Для этого применяется функция new(type). В эту функцию
		передается тип, объект которого надо создать. Функция возвращает указатель на
		созданный объект:
	*/
	{
		// NEW - ВОЗВРАЩАЕТ УКАЗАТЕЛЬ НА БЕЗЫМЯННЫЙ ОБЪЕКТ!!!
		p := new(int)
		fmt.Println("Value:", *p) // Value: 0 - значение по умолчанию
		*p = 8                    // изменяем значение
		fmt.Println("Value:", *p) // Value: 8

		/*
			Объект, созданный с помощью функции new, ничем не отличается
			от обычной переменной. Единственное что, чтобы обратиться к
			этому объекту - получить или изменить его адрес, необходимо
			использовать указатель.
		*/
	}
}

// вспомогательная функция в пакете для форматирования вывода в консоль
func line(text string) {
	fmt.Println()
	fmt.Println("-------------------", text, "------------------------")
	fmt.Println()
}
