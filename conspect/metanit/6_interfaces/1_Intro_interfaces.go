package interfaces

import (
	"fmt"
)

// Интерфейсы представляют абстракцию поведения других типов.
// Интерфейсы позволяют определять функции, которые не привязаны
// к конкретной реализации. То есть интерфейсы определяют
// некоторый функционал, но не реализуют его.

// В Go интерфейс реализуется НЕЯВНО. Нам не надо специально указывать,
// что структуры применяют определенный интерфейс, как в некоторых других
// языках программирования. Для реализации типу данных достаточно реализовать
// методы, которые определяет интерфейс.

type Vehicle interface {
	move()
}

// структура "Автомобиль"
type Car struct{}

// структура "Самолет"
type Aircraft struct{}

func (c Car) move() {
	fmt.Println("Автомобиль едет")
}

func (a Aircraft) move() {
	fmt.Println("Самолет летит")
}

func ExampleIntroInterfaces() {

	// создаем переменные интерфейса
	// передавая им объекты структур
	var tesla Vehicle = Car{}
	var boing Vehicle = Aircraft{}

	tesla.move()
	boing.move()
}

////////////////////////////////////////////////////////////
//                                                        //
//         П Р И М Е Р   К О Н К Р Е Т Н Е Е              //
//                                                        //
//                                                        //
//             того, зачем нужны интерфейсы               //
//                                                        //
////////////////////////////////////////////////////////////

/*
// БЫЛО
func driveCar(c Car) {
	c.move()
}
func driveAircraft(a Aircraft) {
	a.move()
}

// вызовы в коде :

driveCar(tesla)
driveAircraft(boing)

*/
///////////////////////////////////////////////////////////////
/*
// СТАЛО
func drive(vehicle Vehicle) {
	vehicle.move()
}

// вызовы в коде :

drive(tesla)
drive(boing)
*/
