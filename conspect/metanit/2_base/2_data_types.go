package base

import "fmt"

func ExampleTypes() {

	//---------------------------------------------------------------------------------------------------------
	//               -
	//               -
	// ЦЕЛЫЕ ЧИСЛА   -
	//               -
	//               -
	//---------------------------------------------------------------------------------------------------------

	// int8: представляет целое число от -128 до 127 и занимает в памяти 1 байт (8 бит)

	// int16: представляет целое число от -32768 до 32767 и занимает в памяти 2 байта (16 бит)

	// int32: представляет целое число от -2147483648 до 2147483647 и занимает 4 байта (32 бита)

	// int64: представляет целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт (64 бита)

	// uint8: представляет целое число от 0 до 255 и занимает 1 байт

	// uint16: представляет целое число от 0 до 65535 и занимает 2 байта

	// uint32: представляет целое число от 0 до 4294967295 и занимает 4 байта

	// uint64: представляет целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт

	// byte: синоним типа uint8, представляет целое число от 0 до 255 и занимает 1 байт

	// rune: синоним типа int32, представляет целое число от -2147483648 до 2147483647 и занимает 4 байта

	// int: представляет целое число со знаком, которое в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо int32, либо int64.

	// uint: представляет целое беззнаковое число только без знака, которое, аналогично типу int, в зависимости о платформы может занимать либо 4 байта, либо 8 байт. То есть соответствовать либо uint32, либо uint64.

	var a int8 = -1
	var b uint8 = 2
	var c byte = 3 // byte - синоним типа uint8
	var d int16 = -4
	var f uint16 = 5
	var g int32 = -6
	var h rune = -7 // rune - синоним типа int32
	var j uint32 = 8
	var k int64 = -9
	var l uint64 = 10
	var m int = 102
	var n uint = 105

	fmt.Println(a, b, c, d, f, g, h, j, k, l, m, n)

	//---------------------------------------------------------------------------------------------------------
	//                             -
	//                             -
	// ЧИСЛА С ПЛАВАЮЩЕЙ ТОЧКОЙ    -
	//                             -
	//                             -
	//---------------------------------------------------------------------------------------------------------

	// float32: представляет число с плавающей точкой от 1.4*10^-45 до 3.4*10^38(для положительных). Занимает в памяти 4 байта (32 бита)

	// float64: представляет число с плавающей точкой от 4.9*10^-324 до 1.8*10^308 (для положительных) и занимает 8 байт.

	var f2 float32 = 18
	var g2 float32 = 4.5
	var d2 float64 = 0.23
	var pi float64 = 3.14
	var e float64 = 2.7

	fmt.Println(f2, g2, d2, pi, e)

	//---------------------------------------------------------------------------------------------------------
	//                        -
	//                        -
	// КОМПЛЕКСНЫЕ ЧИСЛА      -
	//                        -
	//                        -
	//---------------------------------------------------------------------------------------------------------

	// complex64: комплексное число, где вещественная и мнимая части представляют числа float32

	// complex128: комплексное число, где вещественная и мнимая части представляют числа float64

	var complex1 complex64 = 1 + 2i
	var complex2 complex128 = 4 + 3i

	fmt.Println(complex1, complex2)

	//---------------------------------------------------------------------------------------------------------
	//                        -
	//                        -
	// ЛОГИЧЕСКИЙ ТИП         -
	//                        -
	//                        -
	//---------------------------------------------------------------------------------------------------------

	var isAlive bool = true
	var isEnabled bool = false

	fmt.Println(isAlive, isEnabled)

	//---------------------------------------------------------------------------------------------------------
	//                        -
	//                        -
	// СТРОКИ                 -
	//                        -
	//                        -
	//---------------------------------------------------------------------------------------------------------

	//
	// строковый литерал в go заключается в двойные кавычки
	var name string = "Том Сойер"

	//
	//
	fmt.Println(name)

	//
	//
	// специальные символы строк
	//
	//
	fmt.Println("\n") // новая строка
	fmt.Println("\r") // возврат каретки
	fmt.Println("\t") // табуляция
	fmt.Println("\"") // экранирование
	fmt.Println("\\") // экранирование

	//---------------------------------------------------------------------------------------------------------
	//                        -
	//                        -
	// значение по умолчанию  -
	//                        -
	//                        -
	//---------------------------------------------------------------------------------------------------------

	/*
	   Значение по умолчанию

	   Если переменной не присвоено значение, то она имеет значение по умолчанию, которое определено для ее типа.
	   Для числовых типов это число 0, для логического типа - false, для строк - ""(пустая строка).
	*/

	var name_def string // ""
	var int_def int     // 0
	var bool_def bool   // false

	fmt.Println("Значения по умолчанию: ", name_def, int_def, bool_def)

	//---------------------------------------------------------------------------------------------------------
	//                        -
	//                        -
	// Неявная типизация      -
	//                        -
	//                        -
	//---------------------------------------------------------------------------------------------------------

	// компилятор по значению, как и в кратком определении, автоматически присваивает тип
	var name2 = "Tom"

	fmt.Println(name2)

	// var name3    // ! Ошибка

	//
	// неявная типизация нескольких переменных
	var (
		name4 = "Tom"
		age4  = 27
	)
	// или так
	var name5, age5 = "Tom", 27

	fmt.Println(name4, age4)
	fmt.Println(name5, age5)

}

// источник
// https://metanit.com/go/tutorial/2.3.php
//
